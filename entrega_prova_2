Aprendizagem supervisionada:

No aprendizado supervisionado, a máquina é ensinada pelo exemplo. O operador fornece ao algoritmo de aprendizado
de máquina um conjunto de dados conhecidos que inclui entradas e saídas desejadas, e o algoritmo deve encontrar um método para determinar como chegar a essas entradas e saídas. Enquanto o operador conhece as respostas corretas para o problema, o algoritmo identifica padrões nos dados, aprende com as observações e faz previsões. O algoritmo faz previsão e é corrigido pelo operador, e esse processo continua que o algoritmo parecido um alto nível de precisão/desempenho.

Aprendizagem semi-supervisionada:

O aprendizado semissupervisionado é semelhante ao aprendizado supervisionado, mas usa dados rotulados e não rotulados. Os dados rotulados são essencialmente informações que possuem tags criadas para que o algoritmo possa entender os dados, enquanto os dados não rotulados carecem dessas informações. Ao usar essa combinação, os algoritmos de aprendizado de máquina podem aprender a rotular dados não rotulados.

Aprendizagem não supervisionada:

Aqui, o algoritmo de processamento de máquina estuda dados para identificar padrões. Não há tecla de resposta ou operador humano para fornecer instruções. Em vez disso, a máquina determina as correlações e relacionamentos analisando os dados disponíveis. Em um processo de aprendizado não supervisionado, o algoritmo de aprendizado de máquina é deixado para interpretar grandes conjuntos de dados e endereçar esses dados de acordo. O algoritmo tenta organizar esses dados de alguma forma para descrever sua estrutura. Isso pode significar agrupar os dados em clusters ou organizá-los de uma forma que é mais organizada.

Aprendizagem por reforço:

O aprendizado por segurança se concentra em processos de aprendizado controlados, nos quais um algoritmo de aprendizado de máquina é fornecido com um conjunto de ações, parâmetros e valores finais. Ao definir as regras, o algoritmo de aprendizado de máquina tenta explorar diferentes opções e possibilidades, monitorando e avaliando cada resultado para determinar qual é o ideal. O aprendizado por reforço ensina a tentativa e erro da máquina. Aprende com as experiências passadas e começa a adaptar sua abordagem em resposta à situação para alcançar o melhor resultado possível.

EXEMPLOS:

aprendizagem supervisionada:

Preço de casas

aprendizagem semi-supervisionada:

Classificação de páginas da web as quais podem ser transmitidas automaticamente, mas que fluíram de uma leitura humana para marcação do conteúdo.

aprendigazem não supervisionada:

exploração de dados

carros autónomos

--------------------------------------------------------------------------------------------------------------------------------------------------


1. Automatizar seus testes permite que você teste de forma mais rápida e eficiente .  automação de teste é uma parte
indispensável do trabalho de desenvolvimento de software,  porque com uma alta taxa de uso e desenvolvimento 
de aplicativos, o teste manual está simplesmente se tornando insuficiente. Testar exige muito esforço da equipe. 
Mesmo assim, um sistema testado ainda pode conter bugs. Raramente há  recursos e tempo suficientes para testar
 o aplicativo adequadamente, e as falhas de teste ocorrem com frequência. É aqui que a  engenharia de automação
 com ferramentas de teste de automação vem para o resgate.
 
 2.  Teste de unidade é um tipo de teste de software em que unidades individuais ou componentes de um software
 são testados. O objetivo é validar se cada unidade do código de software funciona conforme o esperado. O Teste
 de Unidade é feito durante o desenvolvimento (fase de codificação) de um aplicativo pelos desenvolvedores. Os
 testes de unidade isolam uma seção de código e verificam sua exatidão. Uma unidade pode ser uma função
 individual, método, procedimento, módulo ou objeto.
 
 3.  O teste automatizado é um processo que valida se o software está funcionando adequadamente e 
 atendendo aos requisitos antes de ser liberado para produção. Este método de teste de software usa sequências
 de script que são executadas por ferramentas de teste. Ferramentas de teste automatizadas 
 executam exames do software, relatam resultados e comparam resultados com testes anteriores.
 
 4. O teste de unidade serve como base da pirâmide de teste. Os testes de unidade têm um escopo limitado e garantem que as 
 unidades de código isoladas funcionem conforme o esperado. Os testes de unidade  devem avaliar uma única variável 
 e não depender de dependências externas.

O teste de integração é a segunda etapa da pirâmide de teste de software. Os testes de unidade verificam pequenas porções de uma base de código. 
 equipe Dev deve realizar testes de integração para verificar a interação deste código com os demais códigos da aplicação,
 que geralmente compõem o software como um todo. Esses testes verificam como um código interage com componentes externos.
 Esses componentes podem incluir serviços externos (APIs), bancos de dados, serviços da Web e elementos semelhantes.
 Os testes de integração garantem que o software se comunique com eficiência e recupere dados precisos para funcionar conforme o esperado.
 
 O teste de ponta a ponta verifica o enorme volume de código (o aplicativo inteiro). Ele usa um ambiente de teste e dados para simular
 a funcionalidade do mundo real. É o mais caro de manter e tem o ritmo operacional mais lento. Como esse teste verifica
 os aplicativos montados, também é o mais difícil de identificar problemas.

